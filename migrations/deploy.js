const ethers = require("ethers")
const fs = require("fs");
const dotenv = require("dotenv");

dotenv.config();

async function main() {
    const provider = new ethers.JsonRpcProvider(process.env.RPC_PROVIDER);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const contractData = JSON.parse(fs.readFileSync("D:/Blockchain/hardhat/build/contracts/SimpleStorage.json", "utf8"));
    const abi = contractData.abi;
    const binary = contractData.bytecode;

    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying, please wait...")
    const contract = await contractFactory.deploy();
    // const transactionReceipt = await contract.deploymentTransaction().wait(1);
    
    // console.log("Deployment tansaction : ")
    // console.log(contract.deploymentTransaction)

    // console.log("Transaction Receipt : ")
    // console.log(transactionReceipt);

    // **********************

    // deploy with only transaction data !
    // const nonce = await wallet.getNonce();
    // const tx = {
    //     nonce: nonce,
    //     gasPrice: "20000000000",
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x608060405234801561001057600080fd5b50610521806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d146100765780636f760f41146100955780638bab8dd51461013d5780639e7a13ad146101e3575b600080fd5b61006461027f565b60408051918252519081900360200190f35b6100936004803603602081101561008c57600080fd5b5035610286565b005b610093600480360360408110156100ab57600080fd5b8101906020810181356401000000008111156100c657600080fd5b8201836020820111156100d857600080fd5b803590602001918460018302840111640100000000831117156100fa57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550509135925061028b915050565b6100646004803603602081101561015357600080fd5b81019060208101813564010000000081111561016e57600080fd5b82018360208201111561018057600080fd5b803590602001918460018302840111640100000000831117156101a257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610382945050505050565b610200600480360360208110156101f957600080fd5b503561039f565b6040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561024357818101518382015260200161022b565b50505050905090810190601f1680156102705780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6000545b90565b600055565b6040805180820190915281815260208082018481526001805480820180835560009290925284517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6600290920291820190815592518051929594610316937fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf790930192910190610454565b50505050806002836040518082805190602001908083835b6020831061034d5780518252601f19909201916020918201910161032e565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209290925550505050565b805160208183018101805160028252928201919093012091525481565b600181815481106103ac57fe5b60009182526020918290206002918202018054600180830180546040805193821615610100026000190190911695909504601f810187900487028301870190955284825291955091939192909183018282801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b5050505050905082565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061049557805160ff19168380011785556104c2565b828001600101855582156104c2579182015b828111156104c25782518255916020019190600101906104a7565b506104ce9291506104d2565b5090565b61028391905b808211156104ce57600081556001016104d856fea265627a7a72315820949d664238a3d391a620b95d91ea8b1823c2dc4428ce87b3a5864808e9b513d064736f6c63430005100032",
    //     chainId: 1337,
    // };
    // const sentTxResponse = await wallet.sendTransaction(tx);
    // await sentTxResponse.wait(1);
    // console.log(sentTxResponse);

    const currFavNum = await contract.retrieve();
    console.log(`curr fav num : ${currFavNum.toString()}`);

    const transactionResponse = await contract.store("48");
    const transactionReceipt = await transactionResponse.wait(1);
    const updatedFavNum = await contract.retrieve();
    console.log(`updated fav num : ${updatedFavNum}`)
}

main() 
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    })
